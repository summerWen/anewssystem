<?xml version="1.0" encoding="UTF-8"?>
<chapter id="anews-ch-02">
    <title>设计概述</title>

    <sect1>
        <title>核心设计</title>
        <sect2>
            <title>领域模型</title>
            <para>采用hibernate3支持的jpa方式实现ORM数据持久化。</para>
            <para>这方面利用了jdk5的annotation注解和spring提供的AnnotationSessionFactoryBean，实现零配置文件。</para>
        </sect2>
        <sect2>
            <title>manager层</title>
            <para>no dao, no interface，将传统的五层结构缩减为两层，子类只需继承HibernateEntityDao就自动获得CURD功能。通过支持jdk5的generic范型，子类中的方法无需进行类型转换便可获得需要的类型，进一步简化操作。</para>
            <para>到需要分层的时候，可以从manager内部拆分，提取对应的接口。</para>
        </sect2>
        <sect2>
            <title>controller层</title>
            <para>子类只需继承BaseController就能自动获得CURD功能。</para>
            <para>利用spring-2.0新增的request范围，使每次请求生成一个controller实例进行处理。controller不再是被多个线程共同享有，这样可以简化方法定义，同时便于提供多个帮助方法，代码更简洁。</para>
        </sect2>
        <sect2>
            <title>特定功能的封装</title>
            <para>为实现特定功能，提供一系列基类与帮助类。</para>
            <orderedlist>
                <listitem>
                    <para>NamedManager用于处理数据字典，提供createOrGet()方法，实现功能为先在数据库查找同名记录，如果存在则返回这条记录，如果记录不存在，则将名称保存进数据库，并返回保存记录对应的对象。</para>
                </listitem>
                <listitem>
                    <para>TreeManager用户处理自关联树形结构，如菜单，组织结构，提供getTops()方法，获得顶级节点的集合。</para>
                    <para>TreeHelper提供检测parent与child之间是否存在循环关联的checkDeadLock()方法。</para>
                    <para>进一步到达表示层，使用extjs封装的树形控件，少量代码即可实现树形的常用功能。</para>
                </listitem>
            </orderedlist>
        </sect2>
    </sect1>
    <sect1>
        <title>权限模型</title>
        <para>采用acegisecurity，实现基于RBAC（Role Based Access Control基于角色的访问控制）的权限模型管理。</para>
        <para>acegisecurity本身自带多种验证方式，这里仿效springside-2.0中的security模块，对其数据模型进行了扩展，通过User用户 - Role角色 - Resource资源三者之间的多对多关系实现权限管理，附加Role角色与Menu菜单之间的关联，日常调度时，只需要为用户选择角色，就可以获得对应的访问权限。</para>
        <para>URL资源的访问使用filter过滤器拦截，METHOD资源的访问使用aop拦截器拦截。</para>
        <para>ACL（Access Control List访问控制列表）尚未实现。</para>
    </sect1>
    <sect1>
        <title>表现层View</title>
        <para>网站后台的页面使用extjs渲染，用到了Layout布局管理，Grid表格，Tree树形，Dialog对话框等控件。extjs华丽效果的代价就是加载速度变慢，压缩后400多k的js文件还是需要好好考虑如何处理的。</para>
        <para>extjs依然是目前见过的最完美的控件库，而且允许开发者在LGPL写一下免费使用。</para>
        <para>extjs灵活的封装，无需修改即可以与不同后台对接，支持包括JSON,XML等多种数据格式，也让开发者有了更多的选择。目前我们采用的是json格式传输数据，不过json-lib-2.0在多线程并发时有缺陷，亟待解决。</para>
    </sect1>

</chapter>
