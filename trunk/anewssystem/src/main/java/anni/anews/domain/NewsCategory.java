package anni.anews.domain;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import anni.core.domain.tree.AbstractTreeEntityBean;

import org.hibernate.annotations.GenericGenerator;


/**
 * NewsCategory generated by Lingo.
 *
 * @author Lingo
 * @since 2007年08月16日 下午 23时13分00秒31
 */
@Entity
@Table(name = "A_NEWS_CATEGORY")
public class NewsCategory extends AbstractTreeEntityBean<NewsCategory> {
    /** * serial. */
    static final long serialVersionUID = 0L;

    /** * id. */
    private Long id;

    /** * top. */
    private NewsCategory top;

    /** * parent. */
    private NewsCategory parent;

    /** * name. */
    private String name;

    /** * theSort. */
    private Integer theSort;

    /** * status. */
    private Integer status;

    /** * topChildren. */
    private Set<NewsCategory> allChildren = new HashSet<NewsCategory>(0);

    /** * children. */
    private Set<NewsCategory> children = new HashSet<NewsCategory>(0);

    /** * newses. */
    private Set<News> newses = new HashSet<News>(0);

    /** * 构造方法. */
    public NewsCategory() {
    }

    /** * @return id. */
    @GenericGenerator(name = "generator", strategy = "increment")
    @Id
    @GeneratedValue(generator = "generator")
    @Column(name = "ID", unique = true, nullable = false)
    public Long getId() {
        return id;
    }

    /** * @param id id. */
    public void setId(Long id) {
        this.id = id;
    }

    /** * @return newsCategoryByTopId. */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "TOP_ID")
    public NewsCategory getTop() {
        return top;
    }

    /** * @param newsCategoryByTopId newsCategoryByTopId. */
    public void setTop(NewsCategory newsCategoryByTopId) {
        this.top = newsCategoryByTopId;
    }

    /** * @return newsCategoryByParentId. */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "PARENT_ID")
    public NewsCategory getParent() {
        return parent;
    }

    /** * @param newsCategoryByParentId newsCategoryByParentId. */
    public void setParent(NewsCategory newsCategoryByParentId) {
        this.parent = newsCategoryByParentId;
    }

    /** * @return name. */
    @Column(name = "NAME", length = 50)
    public String getName() {
        return name;
    }

    /** * @param name name. */
    public void setName(String name) {
        this.name = name;
    }

    /** * @return theSort. */
    @Column(name = "THE_SORT")
    public Integer getTheSort() {
        return theSort;
    }

    /** * @param theSort theSort. */
    public void setTheSort(Integer theSort) {
        this.theSort = theSort;
    }

    /** * @return status. */
    @Column(name = "STATUS")
    public Integer getStatus() {
        return status;
    }

    /** * @param status status. */
    public void setStatus(Integer status) {
        this.status = status;
    }

    /** * @return newsCategoriesForTopId. */
    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "top")
    public Set<NewsCategory> getAllChildren() {
        return allChildren;
    }

    /** * @param newsCategoriesForTopId newsCategoriesForTopId. */
    public void setAllChildren(Set<NewsCategory> newsCategoriesForTopId) {
        this.allChildren = newsCategoriesForTopId;
    }

    /** * @return newsCategoriesForParentId. */
    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "parent")
    public Set<NewsCategory> getChildren() {
        return children;
    }

    /** * @param newsCategoriesForParentId newsCategoriesForParentId. */
    public void setChildren(Set<NewsCategory> newsCategoriesForParentId) {
        this.children = newsCategoriesForParentId;
    }

    /** * @return newses. */
    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "newsCategory")
    public Set<News> getNewses() {
        return newses;
    }

    /** * @param newses newses. */
    public void setNewses(Set<News> newses) {
        this.newses = newses;
    }
}
